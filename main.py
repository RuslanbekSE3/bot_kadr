from telegram import (
    Update, ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, filters,
    ConversationHandler, ContextTypes
)
from config import BOT_TOKEN, ADMINS, GROUP_ID
import os

# –≠—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞
LANGUAGE, FULL_NAME, AGE, RESUME, PHONE, VACANCY = range(6)

languages = ["uz", "qq", "ru"]

TRANSLATIONS = {
    "uz": {
        "select_language": "Iltimos, tilni tanlang:",
        "full_name": "Iltimos, to'liq ismingizni kiriting (F.I.Sh):",
        "age": "Yoshingizni kiriting:",
        "invalid_age": "Iltimos, yaroqli yosh kiriting.",
        "resume": "Iltimos, rezyumeni yuboring (PDF, DOCX va h.k.):",
        "ask_resume": "Iltimos, rezyumeni yuboring (PDF, DOCX va h.k.):",
        "invalid_file": "Iltimos, to‚Äòg‚Äòri fayl yuboring.",
        "phone": "Telefon raqamingizni yuboring yoki tugmani bosing:",
        "vacancy": "Vakansiyani tanlang:",
        "submit": "Davom etish",
        "submitted": "Rahmat! Arizangiz yuborildi.",
        "cancel": "Suhbat bekor qilindi. /start orqali qayta boshlang."
    },
    "qq": {
        "select_language": "Tildi ta≈Ñla≈Ñ:",
        "full_name": "Tolƒ±q atƒ±≈Ñƒ±zdƒ± kiriti≈Ñ (F.A.∆è):",
        "age": "Jasƒ±≈Ñƒ±zdƒ± kiriti≈Ñ:",
        "invalid_age": "Iltimas, d√∫r√≠s jasta k√≠r√≠zi≈Ñ.",
        "resume": "Iltimas, rezyumeni jiberi≈Ñ (PDF, DOCX h√°m t.b):",
        "ask_resume": "Iltimas, rezyumeni jiberi≈Ñ (PDF, DOCX h√°m t.b):",
        "invalid_file": "Duris fayl jiberi≈Ñ.",
        "phone": "Telefon nomeri≈Ñizdi jiberi≈Ñ yaki t√∫ymeni basƒ±≈Ñ:",
        "vacancy": "Vakansiyani ta≈Ñla≈Ñ:",
        "submit": "Jiberiw",
        "submitted": "Raxmet! Arƒ±za≈Ñƒ±z jiberildi.",
        "cancel": "S√≥ylesiw toqtaldi. /start menen qayta basla≈Ñ."
    },
    "ru": {
        "select_language": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
        "full_name": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:",
        "age": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        "invalid_age": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç.",
        "resume": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (PDF, DOCX –∏ —Ç.–¥.):",
        "ask_resume": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (PDF, DOCX –∏ —Ç.–¥.):",
        "invalid_file": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª.",
        "phone": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É:",
        "vacancy": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:",
        "submit": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        "submitted": "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
        "cancel": "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
    }
}

vacancy_buttons = [["1-vacancy", "2-vacancy"], ["3-vacancy", "4-vacancy"]]
menu_commands = ReplyKeyboardMarkup([["/start", "/cancel"]], resize_keyboard=True)


# START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[KeyboardButton(lang)] for lang in languages]
    await update.message.reply_text(
        "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞≈Ñ–ª–∞≈Ñ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return LANGUAGE


# LANGUAGE SELECTED
async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = update.message.text.lower()
    if lang not in languages:
        return await start(update, context)
    context.user_data['lang'] = lang
    await update.message.reply_text(TRANSLATIONS[lang]['full_name'], reply_markup=menu_commands)
    return FULL_NAME


# FULL NAME
async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['full_name'] = update.message.text
    lang = context.user_data['lang']
    await update.message.reply_text(TRANSLATIONS[lang]['age'], reply_markup=menu_commands)
    return AGE


# AGE
async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data['lang']
    age_text = update.message.text

    if not age_text.isdigit():
        await update.message.reply_text(TRANSLATIONS[lang]['invalid_age'], reply_markup=menu_commands)
        return AGE

    context.user_data['age'] = age_text
    await update.message.reply_text(TRANSLATIONS[lang]['ask_resume'], reply_markup=menu_commands)
    return RESUME


# RESUME FILE
async def get_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data['lang']
    document = update.message.document
    if not document:
        await update.message.reply_text(TRANSLATIONS[lang]['invalid_file'], reply_markup=menu_commands)
        return RESUME
    context.user_data['resume'] = document.file_id

    # PHONE REQUEST BUTTON
    contact_button = KeyboardButton("üì± Share Contact", request_contact=True)
    phone_keyboard = ReplyKeyboardMarkup([[contact_button]], resize_keyboard=True, one_time_keyboard=True)

    await update.message.reply_text(TRANSLATIONS[lang]['phone'], reply_markup=phone_keyboard)
    return PHONE


# PHONE
async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data['lang']

    if update.message.contact:
        phone = update.message.contact.phone_number
    else:
        phone = update.message.text

    context.user_data['phone'] = phone

    await update.message.reply_text(
        TRANSLATIONS[lang]['vacancy'],
        reply_markup=ReplyKeyboardMarkup(vacancy_buttons, resize_keyboard=True)
    )
    return VACANCY


# VACANCY
async def get_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['vacancy'] = update.message.text
    lang = context.user_data['lang']

    message = (
        f"üìÑ {context.user_data['full_name']}\n"
        f"üéÇ {context.user_data['age']} yosh\n"
        f"üì± {context.user_data['phone']}\n"
        f"üíº Vakansiya: {context.user_data['vacancy']}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–¥–º–∏–Ω—É
    for admin in ADMINS:
        try:
            await context.bot.send_document(admin, document=context.user_data['resume'], caption=message)
        except:
            pass

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –≥—Ä—É–ø–ø—É
    try:
        await context.bot.send_document(GROUP_ID, document=context.user_data['resume'], caption=message)
    except:
        pass

    await update.message.reply_text(TRANSLATIONS[lang]['submitted'], reply_markup=menu_commands)
    return ConversationHandler.END


# CANCEL
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    lang = context.user_data.get('lang', 'ru')
    await update.message.reply_text(TRANSLATIONS[lang]['cancel'], reply_markup=menu_commands)
    return ConversationHandler.END


# MAIN
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
            FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
            AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
            RESUME: [MessageHandler(filters.Document.ALL, get_resume)],
            PHONE: [MessageHandler(filters.TEXT | filters.CONTACT, get_phone)],
            VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vacancy)]
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))

    print("Bot running...")
    app.run_polling()















# from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InputFile, ReplyKeyboardRemove


# from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext, ConversationHandler
# from telegram.ext import ContextTypes
# from config import BOT_TOKEN, ADMINS, GROUP_ID
# import os
#
# LANGUAGE, FULL_NAME, AGE, RESUME, PHONE, VACANCY = range(6)
#
# languages = ["uz", "qq", "ru"]
#
# TRANSLATIONS = {
#     "uz": {
#         "select_language": "Iltimos, tilni tanlang:",
#         "full_name": "Iltimos, to'liq ismingizni kiriting (F.I.Sh):",
#         "age": "Yoshingizni kiriting:",
#         "resume": "Rezyumeni yuboring (PDF, DOCX, va hokazo):",
#         "phone": "Telefon raqamingizni yuboring:",
#         "vacancy": "Vakansiyani tanlang:",
#         "submit": "Davom etish",
#         "submitted": "Rahmat! Arizangiz yuborildi.",
#         "cancel": "Suhbat bekor qilindi. /start orqali qayta boshlang.",
#         "invalid_file": "Iltimos, to‚Äòg‚Äòri fayl yuboring."
#     },
#     "qq": {
#         "select_language": "Tildi ta≈Ñla≈Ñ:",
#         "full_name": "Tolƒ±q atƒ±≈Ñƒ±zdƒ± kiriti≈Ñ (F.A.∆è):",
#         "age": "Jasƒ±≈Ñƒ±zdƒ± kiriti≈Ñ:",
#         "resume": "Rezyumeni jiberi≈Ñ (PDF, DOCX, h.t.b):",
#         "phone": "Telefon nomeri≈Ñizdi jiberi≈Ñ:",
#         "vacancy": "Vakansiyani ta≈Ñla≈Ñ:",
#         "submit": "Jiberiw",
#         "submitted": "Raxmet! Arƒ±za≈Ñƒ±z jiberildi.",
#         "cancel": "S√≥ylesiw toqtaldi. /start menen qayta basla≈Ñ.",
#         "invalid_file": "Duris fayl jiberi≈Ñ."
#     },
#     "ru": {
#         "select_language": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
#         "full_name": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:",
#         "age": "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
#         "resume": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ (PDF, DOCX –∏ —Ç.–¥.):",
#         "phone": "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
#         "vacancy": "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é:",
#         "submit": "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
#         "submitted": "–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.",
#         "cancel": "–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
#         "invalid_file": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª."
#     }
# }
#
# vacancy_buttons = [["1-vacancy", "2-vacancy"], ["3-vacancy", "4-vacancy"]]
# menu_commands = ReplyKeyboardMarkup([["/start", "/cancel"]], resize_keyboard=True)
#
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     keyboard = [[KeyboardButton(lang)] for lang in languages]
#     await update.message.reply_text(
#         "Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢–∏–ª–¥–∏ —Ç–∞≈Ñ–ª–∞≈Ñ:",
#         reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
#     )
#     return LANGUAGE
#
# async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     lang = update.message.text.lower()
#     if lang not in languages:
#         return await start(update, context)
#     context.user_data['lang'] = lang
#     await update.message.reply_text(TRANSLATIONS[lang]['full_name'], reply_markup=menu_commands)
#     return FULL_NAME
#
# async def get_full_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data['full_name'] = update.message.text
#     lang = context.user_data['lang']
#     await update.message.reply_text(TRANSLATIONS[lang]['age'], reply_markup=menu_commands)
#     return AGE
#
# async def get_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data['age'] = update.message.text
#     lang = context.user_data['lang']
#     await update.message.reply_text(TRANSLATIONS[lang]['resume'], reply_markup=menu_commands)
#     return RESUME
#
# async def get_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     lang = context.user_data['lang']
#     document = update.message.document
#     if not document:
#         await update.message.reply_text(TRANSLATIONS[lang]['invalid_file'], reply_markup=menu_commands)
#         return RESUME
#     context.user_data['resume'] = document.file_id
#     await update.message.reply_text(TRANSLATIONS[lang]['phone'], reply_markup=menu_commands)
#     return PHONE
#
# async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data['phone'] = update.message.text
#     lang = context.user_data['lang']
#     await update.message.reply_text(TRANSLATIONS[lang]['vacancy'], reply_markup=ReplyKeyboardMarkup(vacancy_buttons, resize_keyboard=True))
#     return VACANCY
#
# async def get_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     context.user_data['vacancy'] = update.message.text
#     lang = context.user_data['lang']
#
#     message = (
#         f"üìÑ {context.user_data['full_name']}\n"
#         f"üéÇ {context.user_data['age']} yosh\n"
#         f"üì± {context.user_data['phone']}\n"
#         f"üíº Vakansiya: {context.user_data['vacancy']}"
#     )
#
#     for admin in ADMINS:
#         try:
#             await context.bot.send_document(admin, document=context.user_data['resume'], caption=message)
#         except:
#             pass
#     try:
#         await context.bot.send_document(GROUP_ID, document=context.user_data['resume'], caption=message)
#     except:
#         pass
#
#     await update.message.reply_text(TRANSLATIONS[lang]['submitted'], reply_markup=menu_commands)
#     return ConversationHandler.END
#
# async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     lang = context.user_data.get('lang', 'ru')
#     await update.message.reply_text(TRANSLATIONS[lang]['cancel'], reply_markup=menu_commands)
#     return ConversationHandler.END
#
# if __name__ == '__main__':
#     app = ApplicationBuilder().token(BOT_TOKEN).build()
#
#     conv_handler = ConversationHandler(
#         entry_points=[CommandHandler("start", start)],
#         states={
#             LANGUAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_language)],
#             FULL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_full_name)],
#             AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_age)],
#             RESUME: [MessageHandler(filters.Document.ALL, get_resume)],
#             PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
#             VACANCY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_vacancy)]
#         },
#         fallbacks=[CommandHandler("cancel", cancel)]
#     )
#
#     app.add_handler(conv_handler)
#     app.add_handler(CommandHandler("cancel", cancel))
#     app.add_handler(CommandHandler("start", start))
#     print("Bot running...")
#     app.run_polling()
